---
- apt_repository: repo='ppa:chris-lea/node.js' state=present update_cache=yes
  sudo: true
  tags: nodejs


- apt: update_cache=yes cache_valid_time=600
  sudo: true


- apt: pkg={{ item }} state=latest
  sudo: true
  with_items:
    - nodejs
    - build-essential
    - ruby1.9.3
    - rubygems1.9.1
    - ruby1.9.1-dev
    - libffi-dev
    - libjpeg-dev
    - gettext



# install ruby packages
#- gem: name={{ item }} executable=yes # does not work and fails with memory error *confused
- shell: gem install {{ item }}
  sudo: true
  with_items:
    - compass
    - sass


# install npm packages global
- npm: name={{ item }} global=yes
  sudo: true
  tags: nodejs
  with_items:
    - bower
    - yuglify


# clone the webapp
- git: repo={{ app.repo }} dest="{{ user.home }}/{{ app.id }}" version="{{ app.version }}" accept_hostkey=yes
  when: app.environment != "development"


# add correct permissons
- file: path="{{ item }}" owner="{{ user.name }}" group=www-data mode=0770 state=directory recurse=yes
  sudo: true
  with_items:
    - {{ app.media_path }}
    - "{{ app.media_path }}/upload"
    - {{ app.static_path }}
  when: app.environment != "development"


# install app specific python packages
# It is really important that the webapp is cloned before the requirements are installed.
- pip: requirements={{ virtualenv.requirements }} virtualenv={{ virtualenv.path }}


# make developers love you
# this depends on a ready installed virtualenv so I put it in here
- lineinfile: dest="{{ item.dest }}" line="{{ item.line }}"
  with_items:
    - { dest: "{{ user.home }}/.bashrc", line: "source {{ virtualenv.path }}/bin/activate" }
    - { dest: "{{ user.home }}/.bashrc", line: "cd {{ app.basedir }}" }
  when: app.environment == "development"


# do migrations
- shell: "{{ virtualenv.path }}/bin/python {{ app.basedir }}/manage.py migrate --settings=django_app.settings.{{ app.environment }}"

# do collectstatic
- shell: "{{ virtualenv.path }}/bin/python {{ app.basedir }}/manage.py collectstatic --settings=django_app.settings.{{ app.environment }} --noinput"

# do collectstatic
- shell: "{{ virtualenv.path }}/bin/python {{ app.basedir }}/manage.py compilemessages --settings=django_app.settings.{{ app.environment }}"
